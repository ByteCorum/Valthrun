use std::{env, path::Path, fs::File, io::BufWriter};
use std::io::Write;

use anyhow::Context;
use serde::Deserialize;


#[derive(Debug, Default, Deserialize)]
pub struct SchemaScope {
    schema_name: String,
    classes: Vec<ClassOffsets>
}

#[derive(Debug, Default, Deserialize)]
pub struct ClassOffsets {
    class_name: String,
    offsets: Vec<Offset>,
}

#[derive(Debug, Default, Deserialize)]
pub struct Offset {
    field_name: String,
    offset: u64
}

fn main() -> anyhow::Result<()> {
    let mut schema = File::open("./cs2_schema.json")
        .context("failed to open cs2_schema.json")?;
    let schema_scopes = serde_json::from_reader::<_, Vec<SchemaScope>>(&mut schema)
        .context("failed to parse schema")?;

    let out_dir = env::var_os("OUT_DIR").unwrap();
    let dest_path = Path::new(&out_dir).join("offsets.rs");
    let output = File::options()
        .create(true)
        .truncate(true)
        .write(true)
        .open(dest_path)
        .context("failed to create offsets.rs")?;

    let mut writer = BufWriter::new(output);
    writeln!(&mut writer, "/* Autogenerated schema offsets */")?;
    for scope in schema_scopes {
        let mod_name = scope.schema_name.replace(".dll", "");
        writeln!(&mut writer, "")?;
        writeln!(&mut writer, "/* {} ({}) */", mod_name, scope.schema_name)?;
        writeln!(&mut writer, "pub mod {} {{", mod_name)?;
        for class in scope.classes {
            let class_name = class.class_name.replace(":", "_");
            writeln!(&mut writer, "  /* class {} ({}) */", class_name, class.class_name)?;
            writeln!(&mut writer, "  pub mod {} {{", class_name)?;
            
            for offset in class.offsets {
                writeln!(&mut writer, "    pub const {}: u64 = 0x{:X};", offset.field_name, offset.offset)?;
            }

            writeln!(&mut writer, "  }}")?;
            writeln!(&mut writer, "  /* {} */", class.class_name)?;
        }
        writeln!(&mut writer, "}}")?;
        writeln!(&mut writer, "/* {} */", mod_name)?;
    }
    Ok(())
}